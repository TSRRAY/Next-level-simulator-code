local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local ServerScriptService = game:GetService("ServerScriptService")

local remotes = ReplicatedStorage:FindFirstChild("Remotes")
local Utils = require(ServerScriptService.Utils.Utils)

local configFolder = ReplicatedStorage:FindFirstChild("Config")
local toolConfig = require(configFolder:FindFirstChild("ToolConfig"))
local rankConfig = require(configFolder:FindFirstChild("RankConfig"))
local dnaConfig = require(configFolder:FindFirstChild("DNAConfig"))



local function hasEquipped(player: Player, toolName: string, shop: string)
	if shop == "Tech" and toolName == player.inventory.EquippedTool.Value or 
		shop == "DNA" and toolName == player.inventory.EquippedDNA.Value or 
		shop == "Ranks" and toolName == player.inventory.EquippedRank.Value then

		return true
	else
		return false
	end
end

local function giveTool(player: Player)
	for _, child in ipairs(player.Backpack:GetChildren()) do
		child:Destroy()
	end
	
	local equippedTool = player.Character:FindFirstChildWhichIsA("Tool")
	if equippedTool then 
		equippedTool:Destroy()
	end
	
	local tool = player.inventory.EquippedTool.Value
	repeat task.wait() until player.Character

	local toolClone = ServerStorage:FindFirstChild("Tools"):WaitForChild(tool):Clone()
	toolClone.Parent = player.Backpack

end

local function unequip(player: Player, shop: string)
	if shop == "Tech"  then
		player.inventory.EquippedTool.Value = "BrokenLaptop"
	elseif shop == "DNA" then
		player.inventory.EquippedDNA.Value = "SmallHardDrive"
	else
		player.inventory.EquippedRank.Value = "Noob"
	end	
	
	if shop == "Tech" then
		giveTool(player)
	elseif shop == "Ranks" then
		Utils.equipRank(player)

	end
end

local function equip(player: Player, toolName: string, shop: string)
	-- Equip The Item to Players Inventory
	if shop == "Tech"  then
		player.inventory.EquippedTool.Value = toolName
	elseif shop == "DNA" then
		player.inventory.EquippedDNA.Value = toolName
	else
		player.inventory.EquippedRank.Value = toolName
	end	
	
	if shop == "Tech" then
		giveTool(player)
	elseif shop == "Ranks" then
		Utils.equipRank(player)
		
	end
end


local function ownsItem(player: Player, toolName: string, shop: string)
	local directory = if shop == "Tech" then "OwnedTools"
		elseif shop == "DNA" then "OwnedDNAs"
		else "OwnedRanks"
	
	return player:FindFirstChild("inventory"):FindFirstChild(directory):FindFirstChild(toolName).Value
end


local function rankReset(player: Player)
	for _, child: BoolValue in ipairs(player.inventory.OwnedTools:GetChildren()) do
		if child.Name ~= "BrokenLaptop" then
			child.Value = false
		end
	end
	for _, child: BoolValue in ipairs(player.inventory.OwnedDNAs:GetChildren()) do
		if child.Name ~= "SmallHardDrive" then
			child.Value = false
		end
	end
	unequip(player, "Tech")
	unequip(player, "DNA")
	player.leaderstats.Code.Value = 0
	player.leaderstats.Crypto.Value = 0
	
end

local function purchase(player: Player, toolName: string, toolTable: table, shop: string)
	local directory = if shop == "Tech" then "OwnedTools"
		elseif shop == "DNA" then "OwnedDNAs"
		else "OwnedRanks"

	
	
	player.leaderstats.Crypto.Value -= toolTable.Price
	player:FindFirstChild("inventory"):FindFirstChild(directory):FindFirstChild(toolName).Value = true
	
	if shop == "Ranks" then
		rankReset(player)
	end
end

remotes.Shop.ShopBuy.OnServerInvoke = function(player: Player, itemName: string, shop: string)
	local toolName, toolTable = Utils.getItem(itemName, shop)
	if toolName and toolTable then
		if ownsItem(player, toolName, shop) then
			if hasEquipped(player, toolName, shop) then
				unequip(player, shop)
				if toolName ~= "BrokenLaptop" and toolName ~= "SmallHardDrive" and toolName ~= "Noob" then
					return "UNEQUIPPED"
				end
			else
				equip(player, toolName, shop)
				return "EQUIPPED"
			end
		elseif player.leaderstats.Crypto.Value >= toolTable.Price then
			--Create Purchase Function
			purchase(player, toolName, toolTable, shop)
			equip(player, toolName, shop)
			return "PURCHASED"
		else
			return "NOT ENOUGH MONEY"
			
		end
		
		
		end
		
	print(toolName, toolTable)
	return true
end

remotes.EquipItem.OnServerEvent:Connect(function(player: Player, itemName: string, itemType: string)
	if ownsItem(player, itemName, itemType) then
		equip(player, itemName, itemType)
	end
end)